from vedo import Line,Plotter as VedoPlotter # If using vedo

class Plotter:
    def __init__(self):
        self.vp = VedoPlotter()
        self.lines = []  # Store lines for visualization

    def addLine(self, start, end, c='red'):
        from vedo import Line
        line = Line(start, end, c=c, lw=0.004)
        self.vp += line
        print(f"🖍️ Added line from {start} to {end} with color {c}")
        # """Adds a line to the visualization from start to end."""
        # self.lines.append({'start': start, 'end': end, 'color': c})
        # print(f"🖍️ Added line from {start} to {end} with color {c}")
    def render(self):
        for line_data in self.lines:
            start = line_data['start']
            end = line_data['end']
            color = line_data['color']
            self.vp += Line(start, end, c=color, lw=0.004)  # Add line to the scene
        self.vp.show(interactive=True)

plotter = Plotter()
"""Script to simulate the formation of Homer-Wright rosettes."""

import numpy as np    
from simulation import Simulation, SimulationContainer
import os
import sys

print("Current working directory:", os.getcwd())

def create_tissue(container: SimulationContainer, num_cells: int = 250, base_spacing: float = 2.5, use_3d: bool = False) -> None:
    """
    Creates and registers new neurons in the simulation world, ensuring a more spread-out initial state.
    """
    print(f"Creating initial tissue in a {'3D' if use_3d else '2D'} pattern...")

    center_x, center_y, center_z = 0.0, 0.0, 0.0
    spread_factor = 75.0  # Increase spread to prevent clumping

    for _ in range(num_cells):
        # Generate random placement within a set radius (avoids initial clustering)
        radius = np.random.uniform(5.0, spread_factor)  # Start further apart
        angle = np.random.uniform(0, 2 * np.pi)

        x = center_x + radius * np.cos(angle) + np.random.uniform(-2.0, 2.0)
        y = center_y + radius * np.sin(angle) + np.random.uniform(-2.0, 2.0)
        z = np.random.uniform(-0.5, 0.5) if use_3d else 0.0  # Keep them mostly flat for now

        neuron = container.create_new_neuron(coordinates=[x, y, z])
        # neuron.cell.sphere.scale([0.75, 0.95, 0.75])  # Keep shape uniform
        neuron.cell.sphere.color("blue")  # Default starting color

    print(f"Generated {num_cells} neurons with improved initial spacing.")
    z_values = [neuron.cell.position[2] for neuron in container.neurons]
    print(f"🔎 Z-depth range: min={min(z_values):.3f}, max={max(z_values):.3f}, span={max(z_values) - min(z_values):.3f}")
def create_tissue_new(container: SimulationContainer, num_cells: int = 250, base_spacing: float = 2.5, use_3d: bool = False, spring_constant: float = 0.01) -> None:
    """
    Creates and registers new neurons in the simulation world, ensuring a more spread-out initial state.
    """
    print(f"Creating initial tissue in a {'3D' if use_3d else '2D'} pattern...")

    center_x, center_y, center_z = 0.0, 0.0, 0.0
    spread_factor = 75.0  # Increase spread to prevent clumping

    for _ in range(num_cells):
        # Generate random placement within a set radius (avoids initial clustering)
        radius = np.random.uniform(5.0, spread_factor)  # Start further apart
        angle = np.random.uniform(0, 2 * np.pi)

        x = center_x + radius * np.cos(angle) + np.random.uniform(-2.0, 2.0)
        y = center_y + radius * np.sin(angle) + np.random.uniform(-2.0, 2.0)
        z = np.random.uniform(-0.5, 0.5) if use_3d else 0.0  # Keep them mostly flat for now

        neuron = container.create_and_resolve_neuron([x, y, z], spring_constant=spring_constant)
        # neuron.cell.sphere.scale([0.75, 0.95, 0.75])  # Keep shape uniform
        neuron.cell.sphere.color("blue")  # Default starting color

    print(f"Generated {num_cells} neurons with improved initial spacing.")
    z_values = [neuron.cell.position[2] for neuron in container.neurons]
    print(f"🔎 Z-depth range: min={min(z_values):.3f}, max={max(z_values):.3f}, span={max(z_values) - min(z_values):.3f}")

def main():
    # Ensure consistent paths and compatibility
    base_dir = r'C:\Users\16785\Desktop\neurorosette_code'
    config_path = os.path.join(base_dir, 'config.yml')

    if not os.path.exists(config_path):
        print(f"Configuration file not found at {config_path}")
        sys.exit(1)

    print("Initializing simulation...")
    sim_world = Simulation.from_file(config_path)

    # Ensure the simulation has a valid timer step
    if sim_world.timer.step == 0:
        raise ValueError("Simulation timer step is set to 0. Please check your configuration.")

    # Replace the default container with SimulationContainer
    sim_world.container = SimulationContainer(
        grid=sim_world.grid,
        simulation_2d=True,
        plotter = plotter,
        neuron_factory=sim_world.container.neuron_factory,
        contact_factory=sim_world.contact_factory,
        timer=sim_world.timer,
        drag_coefficient=10.0,
    )
    # sim_world.container.plotter = plotter
    # Create initial configuration with even plane distribution
    print("Creating initial tissue...")
    create_tissue_new(sim_world.container, num_cells=100, base_spacing=1.0, use_3d=False, spring_constant=0.01)
    
    for neuron in sim_world.container.neurons:
        neuron.cell.position[2] = 0.0
        if hasattr(neuron.cell, "sphere"):
            neuron.cell.sphere.pos(neuron.cell.position)


    # Ensure all cells are blue initially
    sim_world.container.update_sphere_colors_and_deform(time_step=0.0)

    # Plot the current state of the simulation
    print("Setting up animator...")
    sim_world.container.animator.set_camera(height=400.0)
    sim_world.container.animator.show()

    # Run the simulation with jiggle and dynamic updates
    print("Running simulation...")
    current_time_step = 0  # Start at time 0
    while sim_world.timer.current_time < sim_world.timer.total_time:
        sim_world.container.jiggle_neurons(jiggle_magnitude=0.10)
        sim_world.container.advance_cycles(sim_world.timer.step)

        # sim_world.container.adjust_repulsion_strength()

        current_time = sim_world.timer.current_time

        # Apply adhesion forces
    current_time = sim_world.timer.current_time
    for neuron in sim_world.container.neurons:
        for other_neuron in sim_world.container.neurons:
            if neuron is not other_neuron:
                adhesion_force = neuron.calculate_adhesion_force(other_neuron, current_time)
                neuron.cell.position += adhesion_force

    sim_world.container.update_sphere_colors_and_deform(time_step=current_time)

    # End the simulation
    sim_world.run()

    #Red Lines Drawn
    sim_world.container.plotter.render()

    # Display the final state
    sim_world.container.animator.show(interactive=True)


if __name__ == "__main__":
    main()
